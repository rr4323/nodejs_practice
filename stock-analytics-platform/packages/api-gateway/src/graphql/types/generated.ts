// This file is auto-generated by codegen.ts
// Do not edit this file directly

import { GraphQLResolveInfo } from 'graphql';
import { GraphQLContext } from '../context';

export type Resolver<Result, Parent = {}, Context = {}, Args = {}> = (
  parent: Parent,
  args: Args,
  context: Context,
  info: GraphQLResolveInfo
) => Promise<Result> | Result;

export type SubscriptionResolver<Result, Parent = {}, Context = {}, Args = {}> = {
  subscribe<R = Result, P = Parent>(
    parent: P,
    args: Args,
    context: Context,
    info: GraphQLResolveInfo
  ): AsyncIterator<R | null> | Promise<AsyncIterator<R | null>>;
  resolve?<R = Result, P = Parent>(
    parent: P,
    args: Args,
    context: Context,
    info: GraphQLResolveInfo
  ): R | Promise<R>;
};

export interface Status {
  __typename?: 'Status';
  status: string;
  timestamp: string;
  uptime: number;
}

export interface Stock {
  __typename?: 'Stock';
  symbol: string;
  name?: string | null;
  price: number;
  change: number;
  changePercent: number;
  timestamp: string;
  volume: number;
  open?: number | null;
  high?: number | null;
  low?: number | null;
  close?: number | null;
}

export interface StockData {
  __typename?: 'StockData';
  symbol: string;
  price: number;
  timestamp: string;
  volume?: number | null;
  open?: number | null;
  high?: number | null;
  low?: number | null;
  close?: number | null;
}

export interface StockAlert {
  __typename?: 'StockAlert';
  id: string;
  symbol: string;
  condition: string;
  value: number;
  isActive: boolean;
  createdAt: string;
  triggeredAt?: string | null;
}

export interface WatchlistResponse {
  __typename?: 'WatchlistResponse';
  success: boolean;
  message?: string | null;
  watchlist?: Array<string> | null;
}

export interface Query {
  __typename?: 'Query';
  status: Status;
  stock?: Stock | null;
  stockHistory: Array<StockData>;
}

export interface StockQueryArgs {
  symbol: string;
}

export interface StockHistoryQueryArgs {
  symbol: string;
  from: string;
  to: string;
}

export interface Mutation {
  __typename?: 'Mutation';
  addToWatchlist: WatchlistResponse;
  removeFromWatchlist: WatchlistResponse;
}

export interface AddToWatchlistMutationArgs {
  symbol: string;
}

export interface RemoveFromWatchlistMutationArgs {
  symbol: string;
}

export interface Subscription {
  __typename?: 'Subscription';
  stockUpdated?: StockData | null;
  stockAlert?: StockAlert | null;
}

export interface StockUpdatedSubscriptionArgs {
  symbol: string;
}

export interface StockAlertSubscriptionArgs {
  symbol: string;
}

export type Resolvers<Context = GraphQLContext> = {
  Status?: StatusResolvers<Context>;
  Stock?: StockResolvers<Context>;
  StockData?: StockDataResolvers<Context>;
  StockAlert?: StockAlertResolvers<Context>;
  WatchlistResponse?: WatchlistResponseResolvers<Context>;
  Query?: QueryResolvers<Context>;
  Mutation?: MutationResolvers<Context>;
  Subscription?: SubscriptionResolvers<Context>;
};

export interface StatusResolvers<Context = GraphQLContext, ParentType = Status> {
  status?: Resolver<string, ParentType, Context>;
  timestamp?: Resolver<string, ParentType, Context>;
  uptime?: Resolver<number, ParentType, Context>;
  __isTypeOf?: (obj: ParentType, info: GraphQLResolveInfo) => Promise<boolean> | boolean;
}

export interface StockResolvers<Context = GraphQLContext, ParentType = Stock> {
  symbol?: Resolver<string, ParentType, Context>;
  name?: Resolver<string | null, ParentType, Context>;
  price?: Resolver<number, ParentType, Context>;
  change?: Resolver<number, ParentType, Context>;
  changePercent?: Resolver<number, ParentType, Context>;
  timestamp?: Resolver<string, ParentType, Context>;
  volume?: Resolver<number, ParentType, Context>;
  open?: Resolver<number | null, ParentType, Context>;
  high?: Resolver<number | null, ParentType, Context>;
  low?: Resolver<number | null, ParentType, Context>;
  close?: Resolver<number | null, ParentType, Context>;
  __isTypeOf?: (obj: ParentType, info: GraphQLResolveInfo) => Promise<boolean> | boolean;
}

export interface StockDataResolvers<Context = GraphQLContext, ParentType = StockData> {
  symbol?: Resolver<string, ParentType, Context>;
  price?: Resolver<number, ParentType, Context>;
  timestamp?: Resolver<string, ParentType, Context>;
  volume?: Resolver<number | null, ParentType, Context>;
  open?: Resolver<number | null, ParentType, Context>;
  high?: Resolver<number | null, ParentType, Context>;
  low?: Resolver<number | null, ParentType, Context>;
  close?: Resolver<number | null, ParentType, Context>;
  __isTypeOf?: (obj: ParentType, info: GraphQLResolveInfo) => Promise<boolean> | boolean;
}

export interface StockAlertResolvers<Context = GraphQLContext, ParentType = StockAlert> {
  id?: Resolver<string, ParentType, Context>;
  symbol?: Resolver<string, ParentType, Context>;
  condition?: Resolver<string, ParentType, Context>;
  value?: Resolver<number, ParentType, Context>;
  isActive?: Resolver<boolean, ParentType, Context>;
  createdAt?: Resolver<string, ParentType, Context>;
  triggeredAt?: Resolver<string | null, ParentType, Context>;
  __isTypeOf?: (obj: ParentType, info: GraphQLResolveInfo) => Promise<boolean> | boolean;
}

export interface WatchlistResponseResolvers<Context = GraphQLContext, ParentType = WatchlistResponse> {
  success?: Resolver<boolean, ParentType, Context>;
  message?: Resolver<string | null, ParentType, Context>;
  watchlist?: Resolver<Array<string> | null, ParentType, Context>;
  __isTypeOf?: (obj: ParentType, info: GraphQLResolveInfo) => Promise<boolean> | boolean;
}

export interface QueryResolvers<Context = GraphQLContext, ParentType = Query> {
  status?: Resolver<Status, ParentType, Context>;
  stock?: Resolver<Stock | null, ParentType, Context, StockQueryArgs>;
  stockHistory?: Resolver<Array<StockData>, ParentType, Context, StockHistoryQueryArgs>;
}

export interface MutationResolvers<Context = GraphQLContext, ParentType = Mutation> {
  addToWatchlist?: Resolver<WatchlistResponse, ParentType, Context, AddToWatchlistMutationArgs>;
  removeFromWatchlist?: Resolver<WatchlistResponse, ParentType, Context, RemoveFromWatchlistMutationArgs>;
}

export interface SubscriptionResolvers<Context = GraphQLContext, ParentType = Subscription> {
  stockUpdated?: SubscriptionResolver<StockData | null, ParentType, Context, StockUpdatedSubscriptionArgs>;
  stockAlert?: SubscriptionResolver<StockAlert | null, ParentType, Context, StockAlertSubscriptionArgs>;
}
